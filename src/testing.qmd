# Testing

```{python}
#| echo: false
import numpy as np
```


There are several ways to test whether two audio DSP algorithm implementations produce the same results. Here are a few options, along with Python examples:

- Relative error: This measures the relative difference between the two outputs. It is calculated as the absolute value of the difference between the two outputs, divided by the absolute value of the reference output. For example:

```{python}
#| lst-label: lst-rel-error-python
#| lst-cap: Relative Error
def relative_error(lhs, rhs, ref):
    return abs(lhs - rhs) / abs(ref)
```

- Root mean squared (RMS) error: This measures the average magnitude of the difference between the two outputs. It is calculated as the square root of the mean of the squares of the differences between the two outputs. For example:

```{python}
#| lst-label: lst-rms-error-python
#| lst-cap: RMS Error
def rms_error(lhs, rhs):
    return np.sqrt(np.mean((lhs - rhs)**2))
```

- Peak signal-to-noise ratio (PSNR): This measures the ratio of the peak power of the reference output to the power of the noise in the difference between the two outputs. It is calculated as the logarithm (base 10) of the ratio of the peak power of the reference output to the mean squared error between the two outputs. For example:

```{python}
#| lst-label: lst-psnr-python
#| lst-cap: Peak signal-to-noise ratio
def psnr(lhs, rhs, ref):
    return 10 * np.log10(np.max(ref)**2 / np.mean((lhs - rhs)**2))
```

- Signal-to-noise ratio (SNR): This measures the ratio of the power of the reference output to the power of the noise in the difference between the two outputs. It is calculated as the ratio of the mean squared value of the reference output to the mean squared error between the two outputs. For example:

```{python}
#| lst-label: lst-snr-python
#| lst-cap: Signal-to-noise ratio
def snr(lhs, rhs, ref):
    return np.mean(ref**2) / np.mean((lhs - rhs)**2)
```

The threshold for relative error, RMS error, PSNR, and SNR depends on the application and the desired level of accuracy. In general, a lower threshold indicates a higher level of accuracy, but also requires more computational resources.

In unit tests, it is common to use a threshold that is based on the precision of the input data. For example, if the input data is stored using single-precision floating point numbers (which have a precision of about 7 decimal digits), a threshold of 1e-6 (0.000001) might be reasonable. This would allow for small errors due to rounding and truncation, but would still catch any large discrepancies between the two implementations.

Alternatively, you could use a threshold based on the dynamic range of the input data. For example, if the input data has a dynamic range of 90 dB (which is common for audio signals), a threshold of 1 dB might be reasonable. This would allow for small errors due to quantization and noise, but would still catch any large discrepancies between the two implementations.

It is also possible to use a combination of these approaches, or to use a different threshold for each measurement. The key is to choose a threshold that is appropriate for your application and that allows you to catch any significant differences between the two implementations.
