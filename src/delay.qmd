# Delay

## Ping-Pong Delay

In a true ping-pong delay effect, the delay times for the left and right channels are different, and the delayed sound bounces back and forth between the channels, creating a sense of movement.

For a Ping-pong effect, the delay times for left and right channels can be calculated from a given delay time (let's call it t) and the desired stereo width of the effect (let's call it s). The stereo width (s) can be a value between 0 and 1, where 0 means a mono effect, and 1 means a maximum stereo width.

Here is one formula you can use to calculate the delay time for the left and right channels, assuming that the desired stereo width (s) and delay time (t) are already known:

```py
left_delay_time = t * (1 - s)
right_delay_time = t * (1 + s)
```

This formula calculates the delay time for the left channel as a percentage of the delay time for the right channel. The left channel has a delay time that is (1 - s) times the original delay time, and the right channel has a delay time that is (1 + s) times the original delay time.

It's worth noting that this formula assumes the stereo width is symmetric, which means the left channel will have the same time delay but in opposite phase than the right channel, so that the sound will bounce back and forth between them. However, there are other ways of creating stereo width using other parameters like feedback gain, and feedback panning.

**Using feedback gain:** You could use different feedback gain values for the left and right channels to create the ping-pong effect. For example, you could use a feedback gain of 0.5 for the left channel and 0.7 for the right channel. This would create a stereo effect where the sound bounces back and forth between the left and right channels, with the right channel having a slightly louder feedback than the left channel, creating the sense of movement.

```py
left_feedback = 0.5
right_feedback = 0.7
```

**Using feedback panning:** You could use different feedback panning values for the left and right channels to create the ping-pong effect. For example, you could use a feedback panning value of -0.7 for the left channel and 0.7 for the right channel. This would create a stereo effect where the sound bounces back and forth between the left and right channels, with the left channel having a hard-left panning value and the right channel having a hard-right panning value, creating the sense of movement.

```py
left_feedback_panning = -0.7
right_feedback_panning = 0.7
```

It's worth noting that these are just examples, and you can experiment with different values for the feedback gain and feedback panning to achieve the desired stereo width and sense of movement for the effect. Also, these examples are applied on the feedback signals, so you will have to adapt them to your implementation.
