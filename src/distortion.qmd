# Distortion

- <http://www.dangelo.audio/#research>

## Nonlinearities

```{python}
#| echo: false
from IPython.display import display, display_latex, Math, Latex
import matplotlib.pyplot as plt
import numpy as np
import scipy.signal as signal
import sympy
from sympy.utilities.lambdify import lambdify

sympy.init_printing(latex_mode='equation*', wrap_line=False)

x = sympy.Symbol('x', real=True)
x_in = np.linspace(-2.0, 2.0, 512)
```


### Full-Wave Rectifier


```{python}
#| echo: false
f = sympy.Abs(x)
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, "k-", label="f")
plt.plot(x_in, AD1_out, "k--", label="AD1")
plt.plot(x_in, AD2_out, "k:", label="AD2")
plt.grid()
plt.legend()
plt.show()
```

### Half-Wave Rectifier

```{python}
#| echo: false
f = sympy.Piecewise((x, sympy.Gt(x, 0)), (0, True))
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, "k-", label="f")
plt.plot(x_in, AD1_out, "k--", label="AD1")
plt.plot(x_in, AD2_out, "k:", label="AD2")
plt.grid()
plt.legend()
plt.show()
```

### Schottky-Diode Rectifier

```{python}
#| echo: false
f = 0.2 * (sympy.exp(1.79*x) - 1.0)
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, "k-", label="f")
plt.plot(x_in, AD1_out, "k--", label="AD1")
plt.plot(x_in, AD2_out, "k:", label="AD2")
plt.grid()
plt.legend()
plt.show()
```

### Soft-Clipper (3rd Degree)

```{python}
#| echo: false
degree = 3
one_over_degree = sympy.Rational(1, degree)
norm_factor = sympy.Rational(degree - 1, degree)
inv_norm = sympy.Rational(1, norm_factor)
y = x * norm_factor
f = (y - (y**degree) * one_over_degree)*inv_norm
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, "k-", label="f")
plt.plot(x_in, AD1_out, "k--", label="AD1")
plt.plot(x_in, AD2_out, "k:", label="AD2")
plt.grid()
plt.legend()
plt.show()
```


### Soft-Clipper (5rd Degree)

```{python}
#| echo: false
degree = 5
one_over_degree = sympy.Rational(1, degree)
norm_factor = sympy.Rational(degree - 1, degree)
inv_norm = sympy.Rational(1, norm_factor)
y = x * norm_factor
f = (y - (y**degree) * one_over_degree)*inv_norm
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, "k-", label="f")
plt.plot(x_in, AD1_out, "k--", label="AD1")
plt.plot(x_in, AD2_out, "k:", label="AD2")
plt.grid()
plt.legend()
plt.show()
```

### Soft-Clipper Exponential

```{python}
#| echo: false
f = sympy.Piecewise((1-sympy.exp(-x), sympy.Gt(x, 0)), (-1+sympy.exp(x), True))
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, "k-", label="f")
plt.plot(x_in, AD1_out, "k--", label="AD1")
plt.plot(x_in, AD2_out, "k:", label="AD2")
plt.grid()
plt.legend()
plt.show()
```

### Hard-Clipper

```{python}
#| echo: false
f = sympy.Piecewise(
    (-1 , sympy.Le(x, -1)),
    (1 , sympy.Ge(x, 1)),
    (x, True),
)
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, "k-", label="f")
plt.plot(x_in, AD1_out, "k--", label="AD1")
plt.plot(x_in, AD2_out, "k:", label="AD2")
plt.grid()
plt.legend()
plt.show()
```

### Sine-Clipper

```{python}
#| echo: false
f = -sympy.sin(sympy.pi*0.5*x)
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, "k-", label="f")
plt.plot(x_in, AD1_out, "k--", label="AD1")
plt.plot(x_in, AD2_out, "k:", label="AD2")
plt.grid()
plt.legend()
plt.show()
```


### Tanh-Clipper

```{python}
#| echo: false
f = sympy.tanh(x)
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
# AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, label="f")
plt.plot(x_in, AD1_out, label="AD1")
# plt.plot(x_in, AD2_out, label="AD2")
plt.grid()
plt.legend()
plt.show()
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

### Overdrive

```{python}
#| echo: false
f = sympy.Piecewise(
    (2*x, sympy.And(sympy.Ge(x, 0) , sympy.Le(x, sympy.Rational(1,3)))),
    ((3-(2-3*x)**2) / 3, sympy.Gt(x, sympy.Rational(1,3)) & sympy.Le(x, sympy.Rational(2,3))),
    (1, True)
)
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, "k-", label="f")
plt.plot(x_in, AD1_out, "k--", label="AD1")
plt.plot(x_in, AD2_out, "k:", label="AD2")
plt.grid()
plt.legend()
plt.show()
```

### Chebyshev Polynomials

- <http://sites.music.columbia.edu/cmc/MusicAndComputers/chapter4/04_06.php>
- <https://dsp.stackexchange.com/questions/26411/possibilties-of-chebyshev-polynomial-waveshaping>
- <https://en.wikipedia.org/wiki/Chebyshev_polynomials#Examples>

```{python}
#| echo: false
f = 16*x**5 - 20*x**3 + 5*x
AD1 = sympy.integrate(f, x)
AD2 = sympy.integrate(AD1, x)

x_in = np.linspace(-1.001, 1.001, 512)
f_out = lambdify(x, f, 'numpy')(x_in)
AD1_out = lambdify(x, AD1, 'numpy')(x_in)
AD2_out = lambdify(x, AD2, 'numpy')(x_in)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(f)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD1)}$$", raw=True)
```

```{python}
#| echo: false
display_latex(f"$${sympy.latex(AD2)}$$", raw=True)
```

```{python}
#| echo: false
#| fig-align: center
plt.plot(x_in, f_out, "k-", label="f")
plt.plot(x_in, AD1_out, "k--", label="AD1")
plt.plot(x_in, AD2_out, "k:", label="AD2")
plt.grid()
plt.legend()
plt.show()
```



## Antiderivative Anti-Aliasing

```{python}
#| lst-label: lst-adaa1-python
#| lst-cap: 1st Order ADAA in Python
class ADAA1:
    def __init__(self, f, AD1, TOL=1.0e-5):
        self.TOL = TOL
        self.f = f
        self.AD1 = AD1

    def process(self, x):
        y = np.copy(x)
        x1 = 0.0
        for n, _ in enumerate(x):
            if np.abs(x[n] - x1) < self.TOL:  # fallback
                y[n] = self.f((x[n] + x1) / 2)
            else:
                y[n] = (self.AD1(x[n]) - self.AD1(x1)) / (x[n] - x1)
            x1 = x[n]
        return y
```

```{python}
#| lst-label: lst-adaa2-python
#| lst-cap: 2nd Order ADAA in Python
class ADAA2:
    def __init__(self, f, AD1, AD2, TOL=1.0e-5):
        self.TOL = TOL
        self.f = f
        self.AD1 = AD1
        self.AD2 = AD2

    def process(self, x):
        y = np.copy(x)

        def calcD(x0, x1):
            if np.abs(x0 - x1) < self.TOL:
                return self.AD1((x0 + x1) / 2.0)
            return (self.AD2(x0) - self.AD2(x1)) / (x0 - x1)

        def fallback(x0, x2):
            x_bar = (x0 + x2) / 2.0
            delta = x_bar - x0

            if delta < self.TOL:
                return self.f((x_bar + x0) / 2.0)
            return (
                (2.0 / delta) * (self.AD1(x_bar)
              + (self.AD2(x0) - self.AD2(x_bar)) / delta)
            )

        x1 = 0.0
        x2 = 0.0
        for n, _ in enumerate(x):
            if np.abs(x[n] - x1) < self.TOL:  # fallback
                y[n] = fallback(x[n], x2)
            else:
                y[n] = (2.0 / (x[n] - x2)) * (calcD(x[n], x1) - calcD(x1, x2))
            x2 = x1
            x1 = x[n]
        return y
```

```{python}
#| echo: false
def plot_aliasing(ax, title, freqs_ref, fft_ref, freqs_alias, fft_alias, peaks):
    ax.plot(freqs_ref, fft_ref, '--', c='orange', label='Analog')
    ax.plot(freqs_alias, fft_alias, c='blue', label=title)
    ax.scatter(freqs_ref[peaks], fft_analog[peaks], c='r', marker='x')
    ax.set_title(title)
    # ax.set_xlabel('Frequency [Hz]')
    # ax.set_ylabel('Magnitude [dB]')
    ax.set_xlim(0, 20000)
    ax.set_ylim(5)
    # ax.legend()
    ax.grid()

def plot_fft(x, fs, sm=1.0/24.0):
    fft = 20 * np.log10(np.abs(np.fft.rfft(x) + 1.0e-9))
    freqs = np.fft.rfftfreq(len(x), 1.0 / fs)
    return freqs, fft


def process_nonlin(fc, FS, nonlin, gain=10):
    N = 200000
    sin = np.sin(2 * np.pi * fc / FS * np.arange(N))
    y = nonlin(gain * sin)
    freqs, fft = plot_fft(y, FS)
    return freqs, fft


def signum(x):
    return np.where(x > 0, +1, np.where(x < 0, -1, 0))
    # return int(0 < x) - int(x < 0)


def softClip3(x):
    return -4*x**3/27 + x


def softClip3AD1(x):
    return -x**4/27 + x**2/2


def softClip3AD2(x):
    return -x**5/135 + x**3/6


def softClip5(x):
    return -((256*x**5)/3125)+x


def softClip5AD1(x):
    return -((128*x**6)/9375)+((x**2)/2)


def softClip5AD2(x):
    return -((128*x**7)/65625) + ((x**3)/6)


def softClipExp(x):
    return np.where(x > 0, 1-np.exp(-x), np.exp(x)-1)


def softClipExpAD1(x):
    return np.where(x <= 0, -x + np.exp(x), x + np.exp(-x))


def softClipExpAD2(x):
    return np.where(x <= 0, (x**2) * -0.5 + np.exp(x), (x**2) * 0.5 - np.exp(-x)+2)


def hardClip(x):
    return np.where(x > 1, 1, np.where(x < -1, -1, x))


def hardClipAD1(x):
    return x * x / 2.0 if np.abs(x) < 1 else x * signum(x) - 0.5


def hardClipAD2(x):
    return x * x * x / 6.0 if np.abs(x) < 1 else ((x * x / 2.0) + (1.0 / 6.0)) * signum(x) - (x/2)


def tanhClip(x):
    return np.tanh(x)


def tanhClipAD1(x):
    return x - np.log(np.tanh(x) + 1)


def sineClip(x):
    return -np.sin(x*np.pi*0.5)


def sineClipAD1(x):
    return 2*np.cos(x*np.pi*0.5)/np.pi


def sineClipAD2(x):
    return 4*np.sin(x*np.pi*0.5)/(np.pi**2)


def halfWave(x):
    return np.where((x > 0), x, 0)


def halfWaveAD1(x):
    return np.where((x <= 0), 0, (x**2)/2)


def halfWaveAD2(x):
    return np.where((x <= 0), 0, (x**3)/6)


def fullWave(x):
    return np.abs(x)


def fullWaveAD1(x):
    return np.where((x <= 0), (x**2)/-2, (x**2)/2)


def fullWaveAD2(x):
    return np.where((x <= 0), (x**3)/-6, (x**3)/6)


def diode(x):
    return 0.2 * (np.exp(1.79*x) - 1.0)


def diodeAD1(x):
    return -0.2*x + 0.111731843575419*np.exp(1.79*x)


def diodeAD2(x):
    return -0.1*x**2 + 0.0624200243438095*np.exp(1.79*x)


def chebyshevPolynomial(x):
    return 16*x**5 - 20*x**3 + 5*x


def chebyshevPolynomialAD1(x):
    return (8*x**6)/3 - 5*x**4 + (5*x**2)*0.5


def chebyshevPolynomialAD2(x):
    return (8*x**7)/21 - x**5 + (5*x**3)/6


FC = 1244.5
FS = 44100
OS = 2
```

```{python}
#| echo: false
distortion = "Hard-Clip"

hardClip_ADAA1 = ADAA1(hardClip, hardClipAD1, 1.0e-5)
hardClip_ADAA2 = ADAA2(hardClip, hardClipAD1, hardClipAD2, 1.0e-5)

freqs_analog, fft_analog = process_nonlin(FC, FS*50, hardClip)
peak_idxs = signal.find_peaks(fft_analog, 65)[0]

freqs_alias, fft_alias = process_nonlin(FC, FS, hardClip)
freqs_os, fft_os = process_nonlin(FC, FS*OS, hardClip)

freqs_ad1, fft_ad1 = process_nonlin(FC, FS, hardClip_ADAA1.process)
freqs_ad1os, fft_ad1os = process_nonlin(FC, FS*OS, hardClip_ADAA1.process)

freqs_ad2, fft_ad2 = process_nonlin(FC, FS, hardClip_ADAA2.process)
freqs_ad2os, fft_ad2os = process_nonlin(FC, FS*OS, hardClip_ADAA2.process)

fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6)) = plt.subplots(
    3, 2,
    constrained_layout=True,
    sharex=True,
    sharey=True
)

fig.suptitle(distortion)
fig.supxlabel('Frequency [Hz]')
fig.supylabel('Magnitude [dB]')

# TOP-LEFT
plot_aliasing(ax1, "OS1", freqs_analog, fft_analog,
              freqs_alias, fft_alias, peak_idxs)

# TOP-RIGHT
plot_aliasing(ax2, f"OS{OS}", freqs_analog,
              fft_analog, freqs_os, fft_os, peak_idxs)

# MID-LEFT
plot_aliasing(ax3, f"ADAA1", freqs_analog,
              fft_analog, freqs_ad1, fft_ad1, peak_idxs)

# MID-RIGHT
plot_aliasing(ax4, f"ADAA1 + OS{OS}", freqs_analog,
              fft_analog, freqs_ad1os, fft_ad1os, peak_idxs)

# BOTTOM-LEFT
plot_aliasing(ax5, f"ADAA2", freqs_analog,
              fft_analog, freqs_ad2, fft_ad2, peak_idxs)

# BOTTOM-RIGHT
plot_aliasing(ax6, f"ADAA2 + OS{OS}", freqs_analog,
              fft_analog, freqs_ad2os, fft_ad2os, peak_idxs)


plt.show()
```


```{python}
#| echo: false
distortion = "Full-Wave Rectifier"

fullWave_ADAA1 = ADAA1(fullWave, fullWaveAD1, 1.0e-5)
fullWave_ADAA2 = ADAA2(fullWave, fullWaveAD1, fullWaveAD2, 1.0e-5)

freqs_analog, fft_analog = process_nonlin(FC, FS*50, fullWave)
peak_idxs = signal.find_peaks(fft_analog, 65)[0]

freqs_alias, fft_alias = process_nonlin(FC, FS, fullWave)
freqs_os, fft_os = process_nonlin(FC, FS*OS, fullWave)

freqs_ad1, fft_ad1 = process_nonlin(FC, FS, fullWave_ADAA1.process)
freqs_ad1os, fft_ad1os = process_nonlin(FC, FS*OS, fullWave_ADAA1.process)

freqs_ad2, fft_ad2 = process_nonlin(FC, FS, fullWave_ADAA2.process)
freqs_ad2os, fft_ad2os = process_nonlin(FC, FS*OS, fullWave_ADAA2.process)

fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6)) = plt.subplots(
    3, 2,
    constrained_layout=True,
    sharex=True,
    sharey=True
)

fig.suptitle(distortion)
fig.supxlabel('Frequency [Hz]')
fig.supylabel('Magnitude [dB]')

# TOP-LEFT
plot_aliasing(ax1, "OS1", freqs_analog, fft_analog,
              freqs_alias, fft_alias, peak_idxs)

# TOP-RIGHT
plot_aliasing(ax2, f"OS{OS}", freqs_analog,
              fft_analog, freqs_os, fft_os, peak_idxs)

# MID-LEFT
plot_aliasing(ax3, f"ADAA1", freqs_analog,
              fft_analog, freqs_ad1, fft_ad1, peak_idxs)

# MID-RIGHT
plot_aliasing(ax4, f"ADAA1 + OS{OS}", freqs_analog,
              fft_analog, freqs_ad1os, fft_ad1os, peak_idxs)

# BOTTOM-LEFT
plot_aliasing(ax5, f"ADAA2", freqs_analog,
              fft_analog, freqs_ad2, fft_ad2, peak_idxs)

# BOTTOM-RIGHT
plot_aliasing(ax6, f"ADAA2 + OS{OS}", freqs_analog,
              fft_analog, freqs_ad2os, fft_ad2os, peak_idxs)


plt.show()
```

### Resources


- <https://ccrma.stanford.edu/~jatin/Notebooks/adaa.html>
- <https://github.com/jatinchowdhury18/ADAA>
- <https://github.com/jatinchowdhury18/audio_dspy/blob/master/audio_dspy/nonlinearities.py>
- [ARBITRARY-ORDER IIR ANTIDERIVATIVE ANTIALIASING](https://www.dafx.de/paper-archive/2021/proceedings/papers/DAFx20in21_paper_27.pdf)

